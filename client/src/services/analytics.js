// Google Analytics 4 Service for StartupNamer.org\n// Enterprise-grade analytics tracking with enhanced ecommerce\n\nclass AnalyticsService {\n  constructor() {\n    this.GA4_MEASUREMENT_ID = process.env.REACT_APP_GA4_MEASUREMENT_ID || 'G-XXXXXXXXXX';\n    this.isInitialized = false;\n    this.debugMode = process.env.NODE_ENV === 'development';\n    \n    console.log('üìä Analytics Service initialized');\n    console.log('üîß GA4 Measurement ID:', this.GA4_MEASUREMENT_ID);\n    console.log('üêõ Debug mode:', this.debugMode);\n  }\n\n  // Initialize Google Analytics 4\n  initialize() {\n    if (this.isInitialized) {\n      console.log('üìä Analytics already initialized');\n      return;\n    }\n\n    try {\n      // Load gtag script\n      const script = document.createElement('script');\n      script.async = true;\n      script.src = `https://www.googletagmanager.com/gtag/js?id=${this.GA4_MEASUREMENT_ID}`;\n      document.head.appendChild(script);\n\n      // Initialize gtag\n      window.dataLayer = window.dataLayer || [];\n      window.gtag = function() {\n        window.dataLayer.push(arguments);\n      };\n      \n      window.gtag('js', new Date());\n      window.gtag('config', this.GA4_MEASUREMENT_ID, {\n        // Enhanced measurement settings\n        enhanced_measurement_settings: {\n          scrolls: true,\n          outbound_clicks: true,\n          site_search: true,\n          video_engagement: true,\n          file_downloads: true\n        },\n        // Custom parameters\n        custom_map: {\n          custom_parameter_1: 'industry',\n          custom_parameter_2: 'package_type',\n          custom_parameter_3: 'generation_method'\n        },\n        // Privacy settings\n        anonymize_ip: true,\n        allow_google_signals: false,\n        allow_ad_personalization_signals: false\n      });\n\n      this.isInitialized = true;\n      console.log('‚úÖ Google Analytics 4 initialized successfully');\n      \n      // Track initialization\n      this.trackEvent('analytics_initialized', {\n        event_category: 'system',\n        event_label: 'ga4_setup'\n      });\n      \n    } catch (error) {\n      console.error('‚ùå Failed to initialize Google Analytics:', error);\n    }\n  }\n\n  // Track page views\n  trackPageView(pagePath, pageTitle) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n\n    try {\n      window.gtag('config', this.GA4_MEASUREMENT_ID, {\n        page_path: pagePath,\n        page_title: pageTitle\n      });\n\n      if (this.debugMode) {\n        console.log('üìä Page view tracked:', { pagePath, pageTitle });\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to track page view:', error);\n    }\n  }\n\n  // Track custom events\n  trackEvent(eventName, parameters = {}) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n\n    try {\n      window.gtag('event', eventName, {\n        event_category: parameters.event_category || 'engagement',\n        event_label: parameters.event_label || '',\n        value: parameters.value || 0,\n        ...parameters\n      });\n\n      if (this.debugMode) {\n        console.log('üìä Event tracked:', eventName, parameters);\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to track event:', error);\n    }\n  }\n\n  // Track naming tool interactions\n  trackNamingToolStart(industry, style) {\n    this.trackEvent('naming_tool_start', {\n      event_category: 'naming_tool',\n      event_label: `${industry}_${style}`,\n      industry: industry,\n      style: style\n    });\n  }\n\n  trackNamingToolStep(stepNumber, stepName, formData) {\n    this.trackEvent('naming_tool_step', {\n      event_category: 'naming_tool',\n      event_label: stepName,\n      step_number: stepNumber,\n      industry: formData.industry || '',\n      style: formData.style || '',\n      keywords_count: formData.keywords?.length || 0\n    });\n  }\n\n  trackNamingToolComplete(sessionId, packageType, nameCount) {\n    this.trackEvent('naming_tool_complete', {\n      event_category: 'naming_tool',\n      event_label: packageType,\n      session_id: sessionId,\n      package_type: packageType,\n      names_generated: nameCount,\n      value: this.getPackageValue(packageType)\n    });\n  }\n\n  // Track enhanced ecommerce events\n  trackPurchase(sessionId, packageType, packagePrice, formData) {\n    this.trackEvent('purchase', {\n      transaction_id: sessionId,\n      value: packagePrice,\n      currency: 'USD',\n      event_category: 'ecommerce',\n      items: [{\n        item_id: packageType,\n        item_name: this.getPackageName(packageType),\n        item_category: 'naming_service',\n        item_variant: formData.industry || 'general',\n        quantity: 1,\n        price: packagePrice\n      }]\n    });\n  }\n\n  trackAddToCart(packageType, packagePrice) {\n    this.trackEvent('add_to_cart', {\n      currency: 'USD',\n      value: packagePrice,\n      event_category: 'ecommerce',\n      items: [{\n        item_id: packageType,\n        item_name: this.getPackageName(packageType),\n        item_category: 'naming_service',\n        quantity: 1,\n        price: packagePrice\n      }]\n    });\n  }\n\n  trackBeginCheckout(packageType, packagePrice) {\n    this.trackEvent('begin_checkout', {\n      currency: 'USD',\n      value: packagePrice,\n      event_category: 'ecommerce',\n      items: [{\n        item_id: packageType,\n        item_name: this.getPackageName(packageType),\n        item_category: 'naming_service',\n        quantity: 1,\n        price: packagePrice\n      }]\n    });\n  }\n\n  // Track user engagement\n  trackNameFavorite(nameId, nameName, sessionId) {\n    this.trackEvent('name_favorite', {\n      event_category: 'engagement',\n      event_label: nameName,\n      name_id: nameId,\n      session_id: sessionId\n    });\n  }\n\n  trackNameShare(nameId, nameName, shareMethod) {\n    this.trackEvent('name_share', {\n      event_category: 'engagement',\n      event_label: `${nameName}_${shareMethod}`,\n      name_id: nameId,\n      share_method: shareMethod\n    });\n  }\n\n  trackNameAnalysis(nameId, nameName, analysisType) {\n    this.trackEvent('name_analysis', {\n      event_category: 'engagement',\n      event_label: `${nameName}_${analysisType}`,\n      name_id: nameId,\n      analysis_type: analysisType\n    });\n  }\n\n  // Track performance metrics\n  trackPerformance(metricName, value, unit = 'ms') {\n    this.trackEvent('performance_metric', {\n      event_category: 'performance',\n      event_label: metricName,\n      metric_name: metricName,\n      metric_value: value,\n      metric_unit: unit,\n      value: value\n    });\n  }\n\n  // Track Core Web Vitals\n  trackWebVitals() {\n    if ('web-vitals' in window) {\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS((metric) => this.trackPerformance('CLS', metric.value, 'score'));\n        getFID((metric) => this.trackPerformance('FID', metric.value, 'ms'));\n        getFCP((metric) => this.trackPerformance('FCP', metric.value, 'ms'));\n        getLCP((metric) => this.trackPerformance('LCP', metric.value, 'ms'));\n        getTTFB((metric) => this.trackPerformance('TTFB', metric.value, 'ms'));\n      });\n    }\n  }\n\n  // Track errors\n  trackError(errorMessage, errorStack, errorSource) {\n    this.trackEvent('exception', {\n      event_category: 'error',\n      description: errorMessage,\n      fatal: false,\n      error_source: errorSource,\n      error_stack: errorStack?.substring(0, 500) // Limit stack trace length\n    });\n  }\n\n  // Track user journey\n  trackUserJourney(journeyStep, journeyData = {}) {\n    this.trackEvent('user_journey', {\n      event_category: 'user_flow',\n      event_label: journeyStep,\n      journey_step: journeyStep,\n      ...journeyData\n    });\n  }\n\n  // Track conversion funnel\n  trackConversionFunnel(funnelStep, funnelData = {}) {\n    this.trackEvent('conversion_funnel', {\n      event_category: 'conversion',\n      event_label: funnelStep,\n      funnel_step: funnelStep,\n      ...funnelData\n    });\n  }\n\n  // Helper methods\n  getPackageName(packageType) {\n    const packageNames = {\n      starter: 'Starter Package',\n      professional: 'Professional Package',\n      enterprise: 'Enterprise Package'\n    };\n    return packageNames[packageType] || 'Unknown Package';\n  }\n\n  getPackageValue(packageType) {\n    const packageValues = {\n      starter: 49,\n      professional: 79,\n      enterprise: 159\n    };\n    return packageValues[packageType] || 0;\n  }\n\n  // Set user properties\n  setUserProperty(propertyName, propertyValue) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n\n    try {\n      window.gtag('config', this.GA4_MEASUREMENT_ID, {\n        user_properties: {\n          [propertyName]: propertyValue\n        }\n      });\n\n      if (this.debugMode) {\n        console.log('üìä User property set:', propertyName, propertyValue);\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to set user property:', error);\n    }\n  }\n\n  // Set user ID for cross-device tracking\n  setUserId(userId) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n\n    try {\n      window.gtag('config', this.GA4_MEASUREMENT_ID, {\n        user_id: userId\n      });\n\n      if (this.debugMode) {\n        console.log('üìä User ID set:', userId);\n      }\n    } catch (error) {\n      console.error('‚ùå Failed to set user ID:', error);\n    }\n  }\n\n  // Track custom dimensions\n  setCustomDimension(index, value) {\n    this.setUserProperty(`custom_dimension_${index}`, value);\n  }\n\n  // Debug method to check if analytics is working\n  debugAnalytics() {\n    if (this.debugMode) {\n      console.log('üìä Analytics Debug Info:');\n      console.log('- Initialized:', this.isInitialized);\n      console.log('- Measurement ID:', this.GA4_MEASUREMENT_ID);\n      console.log('- DataLayer:', window.dataLayer);\n      console.log('- gtag function:', typeof window.gtag);\n    }\n  }\n}\n\n// Create and export singleton instance\nconst analyticsService = new AnalyticsService();\n\n// Auto-initialize on import\nif (typeof window !== 'undefined') {\n  // Initialize after DOM is ready\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n      analyticsService.initialize();\n      analyticsService.trackWebVitals();\n    });\n  } else {\n    analyticsService.initialize();\n    analyticsService.trackWebVitals();\n  }\n\n  // Track unhandled errors\n  window.addEventListener('error', (event) => {\n    analyticsService.trackError(\n      event.message,\n      event.error?.stack,\n      'javascript_error'\n    );\n  });\n\n  // Track unhandled promise rejections\n  window.addEventListener('unhandledrejection', (event) => {\n    analyticsService.trackError(\n      event.reason?.message || 'Unhandled Promise Rejection',\n      event.reason?.stack,\n      'promise_rejection'\n    );\n  });\n}\n\nexport default analyticsService;"
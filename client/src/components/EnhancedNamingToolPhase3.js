import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  ArrowRight, \n  ArrowLeft, \n  Star, \n  Cpu,\n  Target,\n  Zap,\n  CheckCircle,\n  Lightbulb,\n  Building,\n  Palette,\n  Hash,\n  Clock,\n  AlertCircle,\n  Eye,\n  Star\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport apiService from '../services/api';\n\nconst EnhancedNamingToolPhase3 = () => {\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [formData, setFormData] = useState({\n    keywords: [],\n    industry: '',\n    style: '',\n    description: ''\n  });\n\n  const totalSteps = 4; // Step 4 is now Review & Confirmation\n\n  // Industry options\n  const industries = [\n    { id: 'tech', name: 'Technology', icon: '💻', desc: 'SaaS, apps, software platforms' },\n    { id: 'health', name: 'Healthcare', icon: '🏥', desc: 'Medical, wellness, fitness' },\n    { id: 'fintech', name: 'FinTech', icon: '💳', desc: 'Banking, payments, crypto' },\n    { id: 'ecommerce', name: 'E-commerce', icon: '🛒', desc: 'Online retail, marketplaces' },\n    { id: 'education', name: 'Education', icon: '🎓', desc: 'EdTech, learning, training' },\n    { id: 'food', name: 'Food & Beverage', icon: '🍽️', desc: 'Restaurants, delivery, food tech' },\n    { id: 'travel', name: 'Travel', icon: '✈️', desc: 'Tourism, booking, hospitality' },\n    { id: 'ai', name: 'Artificial Intelligence', icon: '🤖', desc: 'AI, machine learning, automation' }\n  ];\n\n  // Style preferences\n  const styles = [\n    { id: 'modern', name: 'Modern', icon: '⚡', desc: 'Clean, tech-forward, innovative' },\n    { id: 'classic', name: 'Classic', icon: '🏛️', desc: 'Timeless, established, trustworthy' },\n    { id: 'creative', name: 'Creative', icon: '🎨', desc: 'Unique, artistic, memorable' },\n    { id: 'professional', name: 'Professional', icon: '💼', desc: 'Corporate, enterprise-ready' }\n  ];\n\n  const handleNext = () => {\n    // Validate current step before proceeding\n    if (!canProceed()) {\n      setError(getValidationMessage());\n      return;\n    }\n    \n    setError(''); // Clear any previous errors\n    \n    if (currentStep < totalSteps) {\n      setCurrentStep(currentStep + 1);\n    } else {\n      handleGenerate();\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n      setError(''); // Clear errors when going back\n    }\n  };\n\n  const handleKeywordAdd = (keyword) => {\n    if (keyword.trim() && formData.keywords.length < 5 && !formData.keywords.includes(keyword.trim())) {\n      setFormData({\n        ...formData,\n        keywords: [...formData.keywords, keyword.trim()]\n      });\n    }\n  };\n\n  const handleKeywordRemove = (keyword) => {\n    setFormData({\n      ...formData,\n      keywords: formData.keywords.filter(k => k !== keyword)\n    });\n  };\n\n  const handleGenerate = async () => {\n    console.log('🚀 PHASE 3 GENERATE - Starting backend API integration...');\n    setIsLoading(true);\n    setError('');\n    \n    try {\n      console.log('📊 Form data to process:', formData);\n      \n      // Validate form data\n      if (!formData.industry || !formData.style || formData.keywords.length === 0) {\n        throw new Error('Please complete all required fields');\n      }\n      \n      // Use Phase 2 backend API for name generation\n      console.log('🔗 Connecting to Phase 2 backend API...');\n      \n      const response = await apiService.generateNames({\n        keywords: formData.keywords,\n        industry: formData.industry,\n        style: formData.style,\n        count: 50,\n        description: formData.description\n      });\n      \n      console.log('✅ Backend API response:', response);\n      \n      if (!response.success || !response.names || response.names.length === 0) {\n        throw new Error('Failed to generate names from backend API');\n      }\n\n      // Create session data with backend response\n      const sessionId = response.sessionId || Date.now().toString();\n      const sessionData = {\n        formData,\n        results: response.names,\n        sessionId: sessionId,\n        sessionToken: response.sessionToken,\n        metadata: response.metadata,\n        timestamp: new Date().toISOString(),\n        backendGenerated: true,\n        phase3Enhanced: true\n      };\n      \n      console.log('💾 Saving Phase 3 session data:', sessionId, sessionData);\n      \n      // Store in localStorage with error handling\n      try {\n        localStorage.setItem(`naming_session_${sessionId}`, JSON.stringify(sessionData));\n        console.log('✅ Phase 3 session data saved to localStorage');\n        \n        // Verify the data was saved\n        const savedData = localStorage.getItem(`naming_session_${sessionId}`);\n        if (!savedData) {\n          throw new Error('Failed to save session data');\n        }\n        \n      } catch (storageError) {\n        console.error('❌ Failed to save to localStorage:', storageError);\n        // Continue anyway - results page can handle missing data\n      }\n\n      console.log('🧭 Navigating to results with backend data:', `/results/${sessionId}`);\n      \n      // Navigate to results page\n      navigate(`/results/${sessionId}`, { replace: true });\n\n    } catch (error) {\n      console.error('❌ Phase 3 name generation failed:', error);\n      setError(error.message || 'Failed to generate names. Please try again.');\n      setIsLoading(false);\n    }\n  };\n\n  const canProceed = () => {\n    switch (currentStep) {\n      case 1: return formData.industry !== '';\n      case 2: return formData.style !== '';\n      case 3: return formData.keywords.length > 0;\n      case 4: return true; // Review step - always can proceed if reached\n      default: return false;\n    }\n  };\n  \n  const getValidationMessage = () => {\n    switch (currentStep) {\n      case 1: return 'Please select an industry to continue';\n      case 2: return 'Please choose a style preference';\n      case 3: return 'Please add at least one keyword';\n      case 4: return 'Please review your selections';\n      default: return 'Please complete this step';\n    }\n  };\n\n  const getStepTitle = () => {\n    switch (currentStep) {\n      case 1: return 'What\\'s your industry?';\n      case 2: return 'What\\'s your style?';\n      case 3: return 'Add your keywords';\n      case 4: return 'Review & Confirm';\n      default: return 'Startup Name Generator';\n    }\n  };\n\n  const getStepDescription = () => {\n    switch (currentStep) {\n      case 1: return 'Choose your industry for targeted name generation';\n      case 2: return 'Select the style that matches your brand vision';\n      case 3: return 'Add keywords that represent your startup (1-5 words)';\n      case 4: return 'Review your selections and generate your startup names';\n      default: return 'AI-powered startup naming tool';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800 flex items-center justify-center\">\n        <div className=\"text-center max-w-md mx-auto\">\n          <motion.div\n            animate={{ rotate: 360 }}\n            transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n            className=\"w-20 h-20 bg-gradient-to-r from-white to-purple-200 rounded-full flex items-center justify-center mx-auto mb-8\"\n          >\n            <Star className=\"w-10 h-10 text-purple-900\" />\n          </motion.div>\n          <h2 className=\"text-3xl font-bold text-white mb-4\">AI is Creating Your Names</h2>\n          <p className=\"text-white/80 mb-6\">Connecting to our advanced backend AI system...</p>\n          \n          <div className=\"bg-white/10 backdrop-blur-sm rounded-xl p-6 mb-6\">\n            <h3 className=\"text-lg font-semibold text-white mb-4\">Processing Steps:</h3>\n            <div className=\"space-y-3\">\n              {[\n                'Connecting to backend API...',\n                'Processing your keywords with AI...',\n                'Analyzing industry naming patterns...',\n                'Generating brandable combinations...',\n                'Calculating brandability scores...',\n                'Finalizing intelligent recommendations!'\n              ].map((step, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: index * 0.8 }}\n                  className=\"text-left text-white/80 flex items-center space-x-3\"\n                >\n                  <CheckCircle className=\"w-4 h-4 text-green-400 flex-shrink-0\" />\n                  <span className=\"text-sm\">{step}</span>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"text-white/60 text-sm\">\n            <p>Using Phase 2 backend infrastructure</p>\n            <p>Enhanced with Phase 3 improvements</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800\">\n      {/* Enhanced Header */}\n      <div className=\"px-6 py-6\">\n        <div className=\"max-w-4xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-400 to-pink-400 rounded-xl flex items-center justify-center\">\n              <Lightbulb className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <span className=\"text-2xl font-bold text-white\">StartupNamer.org</span>\n              <div className=\"text-purple-300 text-sm font-semibold\">Phase 3 Enhanced</div>\n            </div>\n          </div>\n          \n          <button \n            onClick={() => navigate('/')}\n            className=\"text-white/80 hover:text-white transition-colors\"\n          >\n            ← Back to Home\n          </button>\n        </div>\n      </div>\n\n      {/* Enhanced Progress Bar */}\n      <div className=\"px-6 mb-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-white/80\">Step {currentStep} of {totalSteps}</span>\n            <span className=\"text-sm font-medium text-white/80\">{Math.round((currentStep / totalSteps) * 100)}% Complete</span>\n          </div>\n          <div className=\"w-full bg-white/20 rounded-full h-3\">\n            <motion.div\n              className=\"bg-gradient-to-r from-purple-400 to-pink-400 h-3 rounded-full flex items-center justify-end pr-2\"\n              initial={{ width: 0 }}\n              animate={{ width: `${(currentStep / totalSteps) * 100}%` }}\n              transition={{ duration: 0.5 }}\n            >\n              {currentStep > 1 && (\n                <CheckCircle className=\"w-4 h-4 text-white\" />\n              )}\n            </motion.div>\n          </div>\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"px-6 mb-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <motion.div\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"bg-red-500/20 border border-red-500/30 rounded-xl p-4 flex items-center space-x-3\"\n            >\n              <AlertCircle className=\"w-5 h-5 text-red-400\" />\n              <span className=\"text-red-200\">{error}</span>\n              <button \n                onClick={() => setError('')}\n                className=\"ml-auto text-red-400 hover:text-red-200\"\n              >\n                ×\n              </button>\n            </motion.div>\n          </div>\n        </div>\n      )}\n\n      {/* Main Content */}\n      <div className=\"px-6 pb-20\">\n        <div className=\"max-w-4xl mx-auto\">\n          <AnimatePresence mode=\"wait\">\n            {/* Step 1: Industry Selection */}\n            {currentStep === 1 && (\n              <motion.div\n                key=\"step1\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: -20 }}\n                transition={{ duration: 0.3 }}\n              >\n                <div className=\"text-center mb-12\">\n                  <div className=\"w-16 h-16 bg-gradient-to-r from-blue-400 to-cyan-400 rounded-xl flex items-center justify-center mx-auto mb-6\">\n                    <Building className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <h2 className=\"text-4xl font-bold text-white mb-4\">{getStepTitle()}</h2>\n                  <p className=\"text-xl text-white/80\">{getStepDescription()}</p>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  {industries.map((industry) => (\n                    <motion.div\n                      key={industry.id}\n                      whileHover={{ y: -4, scale: 1.02 }}\n                      className={`bg-white/10 backdrop-blur-sm rounded-2xl p-6 cursor-pointer transition-all duration-300 border-2 ${\n                        formData.industry === industry.id \n                          ? 'border-purple-400 shadow-lg bg-white/20' \n                          : 'border-transparent hover:bg-white/15'\n                      }`}\n                      onClick={() => setFormData({...formData, industry: industry.id})}\n                    >\n                      <div className=\"flex items-start space-x-4\">\n                        <div className=\"text-3xl\">{industry.icon}</div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-lg font-bold text-white mb-1\">{industry.name}</h3>\n                          <p className=\"text-white/70 text-sm\">{industry.desc}</p>\n                        </div>\n                        {formData.industry === industry.id && (\n                          <CheckCircle className=\"w-6 h-6 text-purple-400\" />\n                        )}\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </motion.div>\n            )}\n\n            {/* Step 2: Style Selection */}\n            {currentStep === 2 && (\n              <motion.div\n                key=\"step2\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: -20 }}\n                transition={{ duration: 0.3 }}\n              >\n                <div className=\"text-center mb-12\">\n                  <div className=\"w-16 h-16 bg-gradient-to-r from-purple-400 to-pink-400 rounded-xl flex items-center justify-center mx-auto mb-6\">\n                    <Palette className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <h2 className=\"text-4xl font-bold text-white mb-4\">{getStepTitle()}</h2>\n                  <p className=\"text-xl text-white/80\">{getStepDescription()}</p>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  {styles.map((style) => (\n                    <motion.div\n                      key={style.id}\n                      whileHover={{ y: -4, scale: 1.02 }}\n                      className={`bg-white/10 backdrop-blur-sm rounded-2xl p-8 cursor-pointer transition-all duration-300 border-2 ${\n                        formData.style === style.id \n                          ? 'border-purple-400 shadow-lg bg-white/20' \n                          : 'border-transparent hover:bg-white/15'\n                      }`}\n                      onClick={() => setFormData({...formData, style: style.id})}\n                    >\n                      <div className=\"text-center\">\n                        <div className=\"text-4xl mb-4\">{style.icon}</div>\n                        <h3 className=\"text-xl font-bold text-white mb-2\">{style.name}</h3>\n                        <p className=\"text-white/70\">{style.desc}</p>\n                        {formData.style === style.id && (\n                          <CheckCircle className=\"w-6 h-6 text-purple-400 mx-auto mt-4\" />\n                        )}\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </motion.div>\n            )}\n\n            {/* Step 3: Keywords Input */}\n            {currentStep === 3 && (\n              <motion.div\n                key=\"step3\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: -20 }}\n                transition={{ duration: 0.3 }}\n              >\n                <div className=\"text-center mb-12\">\n                  <div className=\"w-16 h-16 bg-gradient-to-r from-green-400 to-emerald-400 rounded-xl flex items-center justify-center mx-auto mb-6\">\n                    <Hash className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <h2 className=\"text-4xl font-bold text-white mb-4\">{getStepTitle()}</h2>\n                  <p className=\"text-xl text-white/80\">{getStepDescription()}</p>\n                </div>\n\n                <div className=\"max-w-2xl mx-auto\">\n                  <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-8\">\n                    <KeywordInput \n                      keywords={formData.keywords}\n                      onAdd={handleKeywordAdd}\n                      onRemove={handleKeywordRemove}\n                      maxKeywords={5}\n                    />\n                    \n                    <div className=\"mt-8\">\n                      <label className=\"block text-white font-medium mb-3\">\n                        Brief Description (Optional)\n                      </label>\n                      <textarea\n                        value={formData.description}\n                        onChange={(e) => setFormData({...formData, description: e.target.value})}\n                        placeholder=\"Tell us more about your startup idea...\"\n                        className=\"w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl focus:ring-2 focus:ring-purple-400/50 focus:border-transparent resize-none text-white placeholder-white/50\"\n                        rows={3}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* Step 4: Review & Confirmation */}\n            {currentStep === 4 && (\n              <motion.div\n                key=\"step4\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: -20 }}\n                transition={{ duration: 0.3 }}\n              >\n                <div className=\"text-center mb-12\">\n                  <div className=\"w-16 h-16 bg-gradient-to-r from-yellow-400 to-orange-400 rounded-xl flex items-center justify-center mx-auto mb-6\">\n                    <Eye className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <h2 className=\"text-4xl font-bold text-white mb-4\">{getStepTitle()}</h2>\n                  <p className=\"text-xl text-white/80\">{getStepDescription()}</p>\n                </div>\n\n                <div className=\"max-w-3xl mx-auto\">\n                  <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-8\">\n                    <h3 className=\"text-xl font-bold text-white mb-6\">Your Selections</h3>\n                    \n                    <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n                      <div className=\"space-y-4\">\n                        <div className=\"flex justify-between items-center p-4 bg-white/10 rounded-xl\">\n                          <span className=\"text-white/80\">Industry:</span>\n                          <span className=\"font-semibold text-white capitalize\">\n                            {industries.find(i => i.id === formData.industry)?.name || formData.industry}\n                          </span>\n                        </div>\n                        \n                        <div className=\"flex justify-between items-center p-4 bg-white/10 rounded-xl\">\n                          <span className=\"text-white/80\">Style:</span>\n                          <span className=\"font-semibold text-white capitalize\">\n                            {styles.find(s => s.id === formData.style)?.name || formData.style}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-4\">\n                        <div className=\"p-4 bg-white/10 rounded-xl\">\n                          <span className=\"text-white/80 block mb-2\">Keywords:</span>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {formData.keywords.map(keyword => (\n                              <span key={keyword} className=\"bg-purple-400/20 text-purple-300 px-3 py-1 rounded-full text-sm font-medium\">\n                                {keyword}\n                              </span>\n                            ))}\n                          </div>\n                        </div>\n                        \n                        {formData.description && (\n                          <div className=\"p-4 bg-white/10 rounded-xl\">\n                            <span className=\"text-white/80 block mb-2\">Description:</span>\n                            <p className=\"text-white text-sm\">{formData.description}</p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"bg-gradient-to-r from-green-500/20 to-emerald-500/20 rounded-xl p-6 border border-green-500/30\">\n                      <h4 className=\"font-bold text-white mb-3 flex items-center space-x-2\">\n                        <Star className=\"w-5 h-5\" />\n                        <span>What you'll get:</span>\n                      </h4>\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <ul className=\"space-y-2 text-white/80 text-sm\">\n                          <li className=\"flex items-center space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                            <span>50 AI-generated startup names</span>\n                          </li>\n                          <li className=\"flex items-center space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                            <span>Brandability scores for each name</span>\n                          </li>\n                          <li className=\"flex items-center space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                            <span>Industry-specific analysis</span>\n                          </li>\n                        </ul>\n                        <ul className=\"space-y-2 text-white/80 text-sm\">\n                          <li className=\"flex items-center space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                            <span>Domain availability insights</span>\n                          </li>\n                          <li className=\"flex items-center space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                            <span>Naming recommendations</span>\n                          </li>\n                          <li className=\"flex items-center space-x-2\">\n                            <CheckCircle className=\"w-4 h-4 text-green-400\" />\n                            <span>Professional results page</span>\n                          </li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {/* Enhanced Navigation */}\n          <div className=\"flex items-center justify-between mt-12\">\n            <button\n              onClick={handleBack}\n              disabled={currentStep === 1}\n              className={`flex items-center space-x-2 px-6 py-3 rounded-xl font-semibold transition-all duration-300 ${\n                currentStep === 1 \n                  ? 'text-white/40 cursor-not-allowed' \n                  : 'text-white hover:bg-white/10'\n              }`}\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n              <span>Previous</span>\n            </button>\n\n            <div className=\"flex space-x-2\">\n              {Array.from({ length: totalSteps }, (_, index) => (\n                <div\n                  key={index}\n                  className={`w-3 h-3 rounded-full transition-all duration-300 ${\n                    index + 1 <= currentStep \n                      ? 'bg-purple-400' \n                      : 'bg-white/30'\n                  }`}\n                />\n              ))}\n            </div>\n\n            <button\n              onClick={handleNext}\n              disabled={!canProceed()}\n              className={`flex items-center space-x-2 px-8 py-3 rounded-xl font-semibold transition-all duration-300 ${\n                canProceed()\n                  ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:from-purple-600 hover:to-pink-600 shadow-lg hover:shadow-xl'\n                  : 'bg-white/20 text-white/40 cursor-not-allowed'\n              }`}\n            >\n              <span>{currentStep === totalSteps ? 'Generate Names' : 'Next'}</span>\n              {currentStep === totalSteps ? <Star className=\"w-5 h-5\" /> : <ArrowRight className=\"w-5 h-5\" />}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Enhanced Keyword Input Component\nconst KeywordInput = ({ keywords, onAdd, onRemove, maxKeywords = 5 }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim()) {\n      onAdd(inputValue);\n      setInputValue('');\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleSubmit(e);\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit} className=\"mb-6\">\n        <div className=\"flex space-x-3\">\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Enter a keyword...\"\n            className=\"flex-1 px-4 py-3 bg-white/10 border border-white/20 rounded-xl focus:ring-2 focus:ring-purple-400/50 focus:border-transparent text-white placeholder-white/50\"\n            maxLength={25}\n          />\n          <button\n            type=\"submit\"\n            disabled={!inputValue.trim() || keywords.length >= maxKeywords}\n            className={`px-6 py-3 rounded-xl font-semibold transition-all duration-300 ${\n              inputValue.trim() && keywords.length < maxKeywords\n                ? 'bg-purple-500 text-white hover:bg-purple-600'\n                : 'bg-white/20 text-white/40 cursor-not-allowed'\n            }`}\n          >\n            Add\n          </button>\n        </div>\n      </form>\n\n      <div className=\"flex flex-wrap gap-3\">\n        {keywords.map((keyword, index) => (\n          <motion.div\n            key={index}\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.8 }}\n            className=\"flex items-center space-x-2 bg-purple-400/20 text-purple-300 px-4 py-2 rounded-full border border-purple-400/30\"\n          >\n            <span className=\"font-medium\">{keyword}</span>\n            <button\n              onClick={() => onRemove(keyword)}\n              className=\"text-purple-300/70 hover:text-purple-300 transition-colors font-bold\"\n            >\n              ×\n            </button>\n          </motion.div>\n        ))}\n      </div>\n\n      <p className=\"text-white/60 text-sm mt-3\">\n        {keywords.length}/{maxKeywords} keywords added\n      </p>\n    </div>\n  );\n};\n\nexport default EnhancedNamingToolPhase3;"
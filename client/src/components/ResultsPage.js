import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Star, \n  Heart, \n  Download, \n  Share2, \n  ArrowLeft, \n  CheckCircle, \n  Globe, \n  Shield, \n  Zap, \n  Target, \n  Star, \n  TrendingUp,\n  ExternalLink,\n  Clock,\n  AlertCircle,\n  Loader\n} from 'lucide-react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport DomainService from '../utils/domainService';\n\nconst ResultsPage = () => {\n  const { sessionId } = useParams();\n  const navigate = useNavigate();\n  const [sessionData, setSessionData] = useState(null);\n  const [favorites, setFavorites] = useState([]);\n  const [selectedName, setSelectedName] = useState(null);\n  const [domainResults, setDomainResults] = useState(null);\n  const [isCheckingDomains, setIsCheckingDomains] = useState(false);\n  const [reservationStatus, setReservationStatus] = useState(null);
  const [isReserving, setIsReserving] = useState(false);
  const [error, setError] = useState('');
  const [sortBy, setSortBy] = useState('score');
  const [filterBy, setFilterBy] = useState('all');
  const [showUserForm, setShowUserForm] = useState(false);
  const [selectedDomain, setSelectedDomain] = useState(null);\n\n  const domainService = new DomainService();\n\n  useEffect(() => {\n    loadSessionData();\n  }, [sessionId]);\n\n  const loadSessionData = () => {\n    try {\n      const data = localStorage.getItem(`naming_session_${sessionId}`);\n      if (data) {\n        const parsed = JSON.parse(data);\n        setSessionData(parsed);\n        console.log('✅ Loaded session data:', parsed);\n      } else {\n        setError('Session not found. Please generate names again.');\n      }\n    } catch (error) {\n      console.error('❌ Failed to load session data:', error);\n      setError('Failed to load results. Please try again.');\n    }\n  };\n\n  const handleFavorite = (name) => {\n    setFavorites(prev => \n      prev.includes(name) \n        ? prev.filter(f => f !== name)\n        : [...prev, name]\n    );\n  };\n\n  const handleCheckDomains = async (nameData) => {\n    setSelectedName(nameData);\n    setIsCheckingDomains(true);\n    setError('');\n    \n    try {\n      console.log('🔍 Checking domains for:', nameData.name);\n      const results = await domainService.checkDomainAvailability(nameData.name);\n      console.log('✅ Domain check results:', results);\n      \n      if (results.success) {\n        setDomainResults(results);\n      } else {\n        setError(results.error || 'Failed to check domain availability');\n      }\n    } catch (error) {\n      console.error('❌ Domain check failed:', error);\n      setError('Failed to check domains. Please try again.');\n    } finally {\n      setIsCheckingDomains(false);\n    }\n  };\n\n  const handleReserveDomain = async (domainInfo, userEmail) => {\n    setIsReserving(true);\n    setError('');\n    \n    try {\n      console.log('🔒 Reserving domain:', domainInfo.domain);\n      \n      const userInfo = {\n        email: userEmail || 'user@example.com', // In real app, get from form\n        name: 'Startup Founder' // In real app, get from form\n      };\n      \n      const reservation = await domainService.reserveDomain(domainInfo, userInfo);\n      console.log('✅ Reservation result:', reservation);\n      \n      if (reservation.success) {\n        setReservationStatus({\n          success: true,\n          reservationId: reservation.reservationId,\n          domain: reservation.domain,\n          price: reservation.price,\n          paymentUrl: reservation.paymentUrl,\n          expiresAt: reservation.expiresAt\n        });\n      } else {\n        setError(reservation.error || 'Failed to reserve domain');\n      }\n    } catch (error) {\n      console.error('❌ Domain reservation failed:', error);\n      setError('Failed to reserve domain. Please try again.');\n    } finally {\n      setIsReserving(false);\n    }\n  };\n\n  const getSortedAndFilteredNames = () => {\n    if (!sessionData?.results) return [];\n    \n    let filtered = sessionData.results;\n    \n    // Apply filters\n    if (filterBy === 'favorites') {\n      filtered = filtered.filter(name => favorites.includes(name.name));\n    } else if (filterBy === 'high-score') {\n      filtered = filtered.filter(name => name.score >= 8.0);\n    }\n    \n    // Apply sorting\n    return filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'score':\n          return b.score - a.score;\n        case 'name':\n          return a.name.localeCompare(b.name);\n        case 'memorability':\n          return b.memorability - a.memorability;\n        case 'uniqueness':\n          return b.uniqueness - a.uniqueness;\n        default:\n          return 0;\n      }\n    });\n  };\n\n  const getScoreColor = (score) => {\n    if (score >= 9) return 'text-green-400';\n    if (score >= 8) return 'text-blue-400';\n    if (score >= 7) return 'text-yellow-400';\n    return 'text-gray-400';\n  };\n\n  const getScoreLabel = (score) => {\n    if (score >= 9) return 'Excellent';\n    if (score >= 8) return 'Very Good';\n    if (score >= 7) return 'Good';\n    return 'Fair';\n  };\n\n  if (error && !sessionData) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertCircle className=\"w-16 h-16 text-red-400 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-white mb-2\">Oops! Something went wrong</h2>\n          <p className=\"text-white/80 mb-6\">{error}</p>\n          <button\n            onClick={() => navigate('/naming-tool')}\n            className=\"bg-gradient-to-r from-white to-purple-200 text-purple-900 px-6 py-3 rounded-xl font-semibold hover:from-purple-100 hover:to-purple-300 transition-all duration-300\"\n          >\n            Generate New Names\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!sessionData) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader className=\"w-8 h-8 text-white animate-spin mx-auto mb-4\" />\n          <p className=\"text-white/80\">Loading your results...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const sortedNames = getSortedAndFilteredNames();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800\">\n      {/* Header */}\n      <div className=\"px-6 py-6\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-white/20 rounded-xl flex items-center justify-center\">\n              <Star className=\"w-6 h-6 text-white\" />\n            </div>\n            <span className=\"text-2xl font-bold text-white\">StartupNamer.org</span>\n          </div>\n          \n          <button \n            onClick={() => navigate('/naming-tool')}\n            className=\"flex items-center space-x-2 text-white/80 hover:text-white transition-colors\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n            <span>Generate New Names</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Results Header */}\n      <div className=\"px-6 mb-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl md:text-5xl font-black text-white mb-4\">\n              Your AI-Generated Names\n            </h1>\n            <p className=\"text-xl text-white/80\">\n              {sortedNames.length} intelligent names created for your {sessionData.formData.industry} startup\n            </p>\n          </div>\n\n          {/* Filters and Sorting */}\n          <div className=\"flex flex-wrap items-center justify-between gap-4 mb-8\">\n            <div className=\"flex items-center space-x-4\">\n              <select\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value)}\n                className=\"bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white focus:ring-2 focus:ring-white/50\"\n              >\n                <option value=\"score\">Sort by Score</option>\n                <option value=\"name\">Sort by Name</option>\n                <option value=\"memorability\">Sort by Memorability</option>\n                <option value=\"uniqueness\">Sort by Uniqueness</option>\n              </select>\n              \n              <select\n                value={filterBy}\n                onChange={(e) => setFilterBy(e.target.value)}\n                className=\"bg-white/10 border border-white/20 rounded-lg px-4 py-2 text-white focus:ring-2 focus:ring-white/50\"\n              >\n                <option value=\"all\">All Names</option>\n                <option value=\"high-score\">High Score (8.0+)</option>\n                <option value=\"favorites\">Favorites ({favorites.length})</option>\n              </select>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <button className=\"flex items-center space-x-2 bg-white/10 hover:bg-white/20 px-4 py-2 rounded-lg text-white transition-colors\">\n                <Download className=\"w-4 h-4\" />\n                <span>Export</span>\n              </button>\n              <button className=\"flex items-center space-x-2 bg-white/10 hover:bg-white/20 px-4 py-2 rounded-lg text-white transition-colors\">\n                <Share2 className=\"w-4 h-4\" />\n                <span>Share</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"px-6 mb-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"bg-red-500/20 border border-red-500/30 rounded-xl p-4 flex items-center space-x-3\">\n              <AlertCircle className=\"w-5 h-5 text-red-400\" />\n              <span className=\"text-red-200\">{error}</span>\n              <button \n                onClick={() => setError('')}\n                className=\"ml-auto text-red-400 hover:text-red-200\"\n              >\n                ×\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Names Grid */}\n      <div className=\"px-6 pb-20\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {sortedNames.map((nameData, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.05 }}\n                className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20 hover:bg-white/15 transition-all duration-300\"\n              >\n                {/* Name Header */}\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-2xl font-bold text-white\">{nameData.name}</h3>\n                  <button\n                    onClick={() => handleFavorite(nameData.name)}\n                    className={`p-2 rounded-lg transition-colors ${\n                      favorites.includes(nameData.name)\n                        ? 'bg-red-500/20 text-red-400'\n                        : 'bg-white/10 text-white/60 hover:text-white'\n                    }`}\n                  >\n                    <Heart className={`w-5 h-5 ${favorites.includes(nameData.name) ? 'fill-current' : ''}`} />\n                  </button>\n                </div>\n\n                {/* Overall Score */}\n                <div className=\"flex items-center justify-between mb-4\">\n                  <span className=\"text-white/80\">Overall Score:</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`text-2xl font-bold ${getScoreColor(nameData.score)}`}>\n                      {nameData.score}\n                    </span>\n                    <span className={`text-sm ${getScoreColor(nameData.score)}`}>\n                      {getScoreLabel(nameData.score)}\n                    </span>\n                  </div>\n                </div>\n\n                {/* Detailed Scores */}\n                <div className=\"space-y-2 mb-4\">\n                  {[\n                    { label: 'Memorability', value: nameData.memorability, icon: Star },\n                    { label: 'Pronunciation', value: nameData.pronunciation, icon: Target },\n                    { label: 'Uniqueness', value: nameData.uniqueness, icon: Zap },\n                    { label: 'Brandability', value: nameData.brandability, icon: TrendingUp }\n                  ].map((metric, idx) => (\n                    <div key={idx} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <metric.icon className=\"w-4 h-4 text-white/60\" />\n                        <span className=\"text-white/80 text-sm\">{metric.label}:</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-16 bg-gray-700 rounded-full h-2\">\n                          <div \n                            className={`h-2 rounded-full ${getScoreColor(metric.value).replace('text-', 'bg-')}`}\n                            style={{width: `${metric.value * 10}%`}}\n                          ></div>\n                        </div>\n                        <span className={`text-sm font-semibold ${getScoreColor(metric.value)}`}>\n                          {metric.value}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Description */}\n                <p className=\"text-white/70 text-sm mb-4\">{nameData.description}</p>\n                \n                {/* Reasoning */}\n                <p className=\"text-white/60 text-xs mb-6 italic\">{nameData.reasoning}</p>\n\n                {/* Action Buttons */}\n                <div className=\"space-y-3\">\n                  <button\n                    onClick={() => handleCheckDomains(nameData)}\n                    disabled={isCheckingDomains}\n                    className=\"w-full flex items-center justify-center space-x-2 bg-gradient-to-r from-blue-500 to-cyan-500 text-white px-4 py-3 rounded-xl font-semibold hover:from-blue-600 hover:to-cyan-600 transition-all duration-300 disabled:opacity-50\"\n                  >\n                    {isCheckingDomains && selectedName?.name === nameData.name ? (\n                      <Loader className=\"w-4 h-4 animate-spin\" />\n                    ) : (\n                      <Globe className=\"w-4 h-4\" />\n                    )}\n                    <span>\n                      {isCheckingDomains && selectedName?.name === nameData.name \n                        ? 'Checking...' \n                        : 'Check Domains'\n                      }\n                    </span>\n                  </button>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Domain Results Modal */}\n      <AnimatePresence>\n        {domainResults && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-6 z-50\"\n            onClick={() => setDomainResults(null)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-8 max-w-2xl w-full max-h-[80vh] overflow-y-auto border border-white/20\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-2xl font-bold text-white\">Domain Availability for \"{domainResults.name}\"</h3>\n                <button\n                  onClick={() => setDomainResults(null)}\n                  className=\"text-white/60 hover:text-white transition-colors\"\n                >\n                  ×\n                </button>\n              </div>\n\n              <div className=\"space-y-4\">\n                {domainResults.domains.map((domain, index) => (\n                  <div key={index} className=\"bg-white/10 rounded-xl p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-lg font-semibold text-white\">{domain.domain}</span>\n                      <div className=\"flex items-center space-x-2\">\n                        {domain.available ? (\n                          <>\n                            <CheckCircle className=\"w-5 h-5 text-green-400\" />\n                            <span className=\"text-green-400 font-semibold\">Available</span>\n                          </>\n                        ) : (\n                          <>\n                            <AlertCircle className=\"w-5 h-5 text-red-400\" />\n                            <span className=\"text-red-400 font-semibold\">Taken</span>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                    \n                    {domain.available && (\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"text-white/80\">\n                          <span className=\"text-green-400 font-bold\">${domain.price}/year</span>\n                          <span className=\"text-sm text-white/60 ml-2\">via {domain.registrar}</span>\n                        </div>\n                        <button\n                          onClick={() => handleReserveDomain(domain)}\n                          disabled={isReserving}\n                          className=\"flex items-center space-x-2 bg-gradient-to-r from-green-500 to-emerald-500 text-white px-4 py-2 rounded-lg font-semibold hover:from-green-600 hover:to-emerald-600 transition-all duration-300 disabled:opacity-50\"\n                        >\n                          {isReserving ? (\n                            <Loader className=\"w-4 h-4 animate-spin\" />\n                          ) : (\n                            <Shield className=\"w-4 h-4\" />\n                          )}\n                          <span>{isReserving ? 'Reserving...' : 'Reserve'}</span>\n                        </button>\n                      </div>\n                    )}\n                    \n                    {!domain.available && domain.alternatives && domain.alternatives.length > 0 && (\n                      <div className=\"mt-3\">\n                        <p className=\"text-white/60 text-sm mb-2\">Alternatives:</p>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {domain.alternatives.map((alt, altIndex) => (\n                            <span key={altIndex} className=\"bg-white/20 text-white px-2 py-1 rounded text-sm\">\n                              {alt}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              {domainResults.recommendations && domainResults.recommendations.length > 0 && (\n                <div className=\"mt-6 p-4 bg-blue-500/20 rounded-xl border border-blue-500/30\">\n                  <h4 className=\"font-bold text-white mb-3\">💡 Recommendations:</h4>\n                  <div className=\"space-y-2\">\n                    {domainResults.recommendations.map((rec, index) => (\n                      <div key={index} className=\"text-blue-200 text-sm\">\n                        <strong>{rec.domain}:</strong> {rec.reason}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Reservation Success Modal */}\n      <AnimatePresence>\n        {reservationStatus && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-6 z-50\"\n            onClick={() => setReservationStatus(null)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-8 max-w-md w-full border border-white/20\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div className=\"text-center\">\n                <CheckCircle className=\"w-16 h-16 text-green-400 mx-auto mb-4\" />\n                <h3 className=\"text-2xl font-bold text-white mb-4\">Domain Reserved!</h3>\n                <p className=\"text-white/80 mb-6\">\n                  {reservationStatus.domain} has been reserved for you.\n                </p>\n                \n                <div className=\"bg-white/10 rounded-xl p-4 mb-6 text-left\">\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-white/70\">Reservation ID:</span>\n                      <span className=\"text-white font-mono\">{reservationStatus.reservationId}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-white/70\">Price:</span>\n                      <span className=\"text-green-400 font-bold\">${reservationStatus.price}/year</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-white/70\">Expires:</span>\n                      <span className=\"text-yellow-400\">{new Date(reservationStatus.expiresAt).toLocaleDateString()}</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <button\n                    onClick={() => window.open(reservationStatus.paymentUrl, '_blank')}\n                    className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 text-white px-6 py-3 rounded-xl font-semibold hover:from-green-600 hover:to-emerald-600 transition-all duration-300 flex items-center justify-center space-x-2\"\n                  >\n                    <ExternalLink className=\"w-4 h-4\" />\n                    <span>Complete Payment</span>\n                  </button>\n                  \n                  <button\n                    onClick={() => setReservationStatus(null)}\n                    className=\"w-full bg-white/10 hover:bg-white/20 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-300\"\n                  >\n                    Close\n                  </button>\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default ResultsPage;"
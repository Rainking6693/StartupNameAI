[build]
  base = "client/"
  publish = "build/"
  command = "npm install && npm run build:snap"

[build.environment]
  NODE_VERSION = "18"
  NPM_VERSION = "9"
  CI = "false"
  GENERATE_SOURCEMAP = "false"
  # Enable react-snap for prerendering
  REACT_SNAP = "true"
  # Enable compression
  NETLIFY_ENABLE_GATSBY_CACHE = "true"

# Enable advanced optimizations
[build.processing]
  skip_processing = false

[build.processing.css]
  bundle = true
  minify = true

[build.processing.js]
  bundle = true
  minify = true

[build.processing.html]
  pretty_urls = true

[build.processing.images]
  compress = true

# Enable Brotli compression
[[plugins]]
package = "@netlify/plugin-brotli"

# Performance optimizations
[[plugins]]
package = "netlify-plugin-minify-html"

# Prerender key pages for SEO (handled by react-snap during build)
# This is a fallback configuration in case react-snap fails

# Static asset caching with compression
[[headers]]
  for = "/static/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"
    Content-Encoding = "br, gzip"
    Vary = "Accept-Encoding"
    Access-Control-Max-Age = "86400"

# HTML files - enhanced caching with revalidation and security
[[headers]]
  for = "/*.html"
  [headers.values]
    Cache-Control = "public, max-age=60, stale-while-revalidate=300, stale-if-error=86400"
    X-Frame-Options = "SAMEORIGIN"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Permissions-Policy = "geolocation=(), microphone=(), camera=(), payment=(), usb=(), bluetooth=(), serial=(), midi=(), magnetometer=(), gyroscope=(), accelerometer=(), ambient-light-sensor=(), autoplay=(), encrypted-media=(), fullscreen=(), picture-in-picture=(), interest-cohort=()"
    Content-Security-Policy = "default-src 'self'; script-src 'self' 'unsafe-inline' https://js.stripe.com https://checkout.stripe.com https://www.google-analytics.com https://www.googletagmanager.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' https://api.stripe.com https://api.openai.com https://www.google-analytics.com https://vitals.vercel-analytics.com; frame-src 'self' https://js.stripe.com https://checkout.stripe.com; worker-src 'self' blob:; object-src 'none'; base-uri 'self'; form-action 'self' https://checkout.stripe.com; upgrade-insecure-requests; block-all-mixed-content;"
    Strict-Transport-Security = "max-age=31536000; includeSubDomains; preload"
    X-Robots-Tag = "index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1"
    ETag = "strong"
    Vary = "Accept-Encoding"

# JavaScript files with enhanced caching
[[headers]]
  for = "/*.js"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"
    Content-Encoding = "br, gzip"
    Vary = "Accept-Encoding"
    ETag = "strong"

# CSS files with enhanced caching  
[[headers]]
  for = "/*.css"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"
    Content-Encoding = "br, gzip"
    Vary = "Accept-Encoding"
    ETag = "strong"

# Enhanced image optimization with compression
[[headers]]
  for = "/*.jpg"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"
    ETag = "strong"
    Vary = "Accept-Encoding"

[[headers]]
  for = "/*.png"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"
    ETag = "strong"
    Vary = "Accept-Encoding"

[[headers]]
  for = "/*.webp"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"
    ETag = "strong"
    Vary = "Accept-Encoding"

# SVG files
[[headers]]
  for = "/*.svg"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    X-Content-Type-Options = "nosniff"
    Content-Encoding = "br, gzip"
    Vary = "Accept-Encoding"
    ETag = "strong"

# Font files with long-term caching
[[headers]]
  for = "/*.woff2"
  [headers.values]
    Cache-Control = "public, max-age=2592000, immutable"
    X-Content-Type-Options = "nosniff"
    Access-Control-Allow-Origin = "*"
    ETag = "strong"

[[headers]]
  for = "/*.woff"
  [headers.values]
    Cache-Control = "public, max-age=2592000, immutable"
    X-Content-Type-Options = "nosniff"
    Access-Control-Allow-Origin = "*"
    ETag = "strong"

[[headers]]
  for = "/*.ttf"
  [headers.values]
    Cache-Control = "public, max-age=2592000, immutable"
    X-Content-Type-Options = "nosniff"
    Access-Control-Allow-Origin = "*"
    ETag = "strong"

# API routes with enhanced security
[[headers]]
  for = "/api/*"
  [headers.values]
    Cache-Control = "no-cache, no-store, must-revalidate, private"
    X-Content-Type-Options = "nosniff"
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Strict-Transport-Security = "max-age=31536000; includeSubDomains; preload"
    Access-Control-Allow-Methods = "GET, POST, PUT, DELETE, OPTIONS"
    Access-Control-Allow-Headers = "Content-Type, Authorization, X-Requested-With"
    Access-Control-Max-Age = "86400"
    Pragma = "no-cache"
    Expires = "0"

# JSON manifest files
[[headers]]
  for = "/*.json"
  [headers.values]
    Cache-Control = "public, max-age=3600, stale-while-revalidate=86400"
    X-Content-Type-Options = "nosniff"
    Content-Encoding = "br, gzip"
    Vary = "Accept-Encoding"
    ETag = "strong"

# Service Worker with special caching
[[headers]]
  for = "/sw.js"
  [headers.values]
    Cache-Control = "no-cache, no-store, must-revalidate"
    X-Content-Type-Options = "nosniff"
    Service-Worker-Allowed = "/"

# Sitemap and robots files
[[headers]]
  for = "/sitemap*.xml"
  [headers.values]
    Cache-Control = "public, max-age=3600, stale-while-revalidate=86400"
    X-Content-Type-Options = "nosniff"
    X-Robots-Tag = "noindex"

[[headers]]
  for = "/robots.txt"
  [headers.values]
    Cache-Control = "public, max-age=3600, stale-while-revalidate=86400"
    X-Content-Type-Options = "nosniff"

# Global security headers for all files
[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "SAMEORIGIN"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Permissions-Policy = "geolocation=(), microphone=(), camera=(), payment=(), usb=(), bluetooth=(), serial=(), midi=(), magnetometer=(), gyroscope=(), accelerometer=(), ambient-light-sensor=(), autoplay=(), encrypted-media=(), fullscreen=(), picture-in-picture=(), interest-cohort=()"
    Strict-Transport-Security = "max-age=31536000; includeSubDomains; preload"
    X-DNS-Prefetch-Control = "on"
    X-UA-Compatible = "IE=edge"
    X-Powered-By = "StartupNamer.org"
    Expect-CT = "max-age=86400, enforce"
    Cross-Origin-Embedder-Policy = "unsafe-none"
    Cross-Origin-Opener-Policy = "same-origin-allow-popups"
    Cross-Origin-Resource-Policy = "cross-origin"

# Prerendered page redirects - these will be handled by react-snap
# Fallback SPA routing for non-prerendered routes
[[redirects]]
  from = "/naming-tool"
  to = "/naming-tool/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/features"
  to = "/features/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/pricing"
  to = "/pricing/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/how-it-works"
  to = "/how-it-works/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/examples"
  to = "/examples/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/faq"
  to = "/faq/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/contact"
  to = "/contact/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/blog"
  to = "/blog/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/privacy-policy"
  to = "/privacy-policy/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/terms-of-service"
  to = "/terms-of-service/index.html"
  status = 200
  conditions = {Role = ["bot"]}

# Industry-specific pages for SEO
[[redirects]]
  from = "/tech-startup-names"
  to = "/tech-startup-names/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/saas-startup-names"
  to = "/saas-startup-names/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/fintech-startup-names"
  to = "/fintech-startup-names/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/healthcare-startup-names"
  to = "/healthcare-startup-names/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/ai-startup-names"
  to = "/ai-startup-names/index.html"
  status = 200
  conditions = {Role = ["bot"]}

[[redirects]]
  from = "/ecommerce-startup-names"
  to = "/ecommerce-startup-names/index.html"
  status = 200
  conditions = {Role = ["bot"]}

# Edge Functions configuration
[[edge_functions]]
  function = "bot-detection"
  path = "/*"
  cache = "manual"

[[edge_functions]]
  function = "performance-optimizer" 
  path = "/*"
  cache = "manual"

# Final fallback for SPA routing
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200